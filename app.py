# -*- coding: utf-8 -*-
from flask import Flask, request, jsonify
from flask_cors import CORS
import random
import os

app = Flask(__name__)
CORS(app, resources={
    r"/api/*": {
        "origins": ["*"],
        "methods": ["GET", "POST", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"]
    }
})

@app.before_request
def handle_preflight():
    if request.method == "OPTIONS":
        response = jsonify({})
        response.headers.add("Access-Control-Allow-Origin", "*")
        response.headers.add('Access-Control-Allow-Headers', "Content-Type,Authorization")
        response.headers.add('Access-Control-Allow-Methods', "GET,POST,OPTIONS")
        return response

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò–ù "971202300696"
FIXED_CHILDREN = [
    {
        "child_iin": "170218500993",
        "child_surname": "–®–ê–†–ò–§–£–õ–õ–ê",
        "child_name": "–ê–õ–î–ò–Ø–†",
        "child_patronymic": "–î–ê–°–¢–ê–ù“∞–õ–´",
        "child_birth_date": "2017-02-18T01:00:00",
        "act_date": "2017-02-21T01:00:00",
        "act_number": "10-558-17-0000565",
        "zags_name_kz": "–ê–ª–º–∞—Ç—ã “õ. –ù–∞—É—Ä—ã–∑–±–∞–π –∞—É–¥–∞–Ω—ã ”ô–∫—ñ–º –∞–ø–ø–∞—Ä–∞—Ç—ã –ê–∑–∞–º–∞—Ç—Ç—ã“õ —Ö–∞–ª –∞–∫—Ç—ñ–ª–µ—Ä—ñ–Ω —Ç—ñ—Ä–∫–µ—É –±”©–ª—ñ–º—ñ",
        "zags_name_ru": "–ê–ø–ø–∞—Ä–∞—Ç –∞–∫–∏–º–∞ –ù–∞—É—Ä—ã–∑–±–∞–π—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –≥. –ê–ª–º–∞—Ç—ã  –æ—Ç–¥–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–æ–≤ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
    },
    {
        "child_iin": "191006602454",
        "child_surname": "–®–ê–†–ò–§–£–õ–õ–ê",
        "child_name": "–î–ê–†–ò–Ø",
        "child_patronymic": "–î–ê–°–¢–ê–ù“ö–´–ó–´",
        "child_birth_date": "2019-10-06T01:00:00",
        "act_date": "2019-10-10T01:00:00",
        "act_number": "10-559-19-0003773",
        "zags_name_kz": "–ê–ª–º–∞—Ç—ã “õ. –ú–µ–¥–µ—É –∞—É–¥–∞–Ω—ã ”ô–∫—ñ–º –∞–ø–ø–∞—Ä–∞—Ç—ã –ê–∑–∞–º–∞—Ç—Ç—ã“õ —Ö–∞–ª –∞–∫—Ç—ñ–ª–µ—Ä—ñ–Ω —Ç—ñ—Ä–∫–µ—É –±”©–ª—ñ–º—ñ",
        "zags_name_ru": "–ê–ø–ø–∞—Ä–∞—Ç –∞–∫–∏–º–∞ –ú–µ–¥–µ—É—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –≥. –ê–ª–º–∞—Ç—ã  –æ—Ç–¥–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–æ–≤ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
    }
]

def generate_simple_children():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–µ—Ç–µ–π (–º–∏–Ω–∏–º—É–º 1)"""
    # –û—Ç 1 –¥–æ 3 –¥–µ—Ç–µ–π
    num_children = random.randint(1, 3)
    children = []
    
    names_male = ["–ê–õ–î–ò–Ø–†", "–ê–†–ú–ê–ù", "–î–ê–ù–ò–Ø–†"]
    names_female = ["–î–ê–†–ò–Ø", "–ê–ô–ì–£–õ–¨", "–ë–ê–õ–ñ–ê–ù"]
    surnames = ["–ò–í–ê–ù–û–í", "–ö–ê–°–´–ú–û–í", "–ê–ë–î–£–õ–õ–ê–ï–í"]
    
    for i in range(num_children):
        is_male = random.choice([True, False])
        birth_year = random.randint(2010, 2020)
        
        child = {
            "child_iin": f"{birth_year-2000:02d}0{random.randint(1,9):01d}{random.randint(10,28):02d}{random.randint(100000,999999)}",
            "child_surname": random.choice(surnames),
            "child_name": random.choice(names_male if is_male else names_female),
            "child_patronymic": "–î–ê–°–¢–ê–ù“∞–õ–´" if is_male else "–î–ê–°–¢–ê–ù“ö–´–ó–´",
            "child_birth_date": f"{birth_year}-0{random.randint(1,9)}-{random.randint(10,28)}T01:00:00",
            "act_date": f"{birth_year}-0{random.randint(1,9)}-{random.randint(10,28)}T01:00:00",
            "act_number": f"10-{random.randint(558,599)}-{birth_year-2000:02d}-{random.randint(1000000,9999999):07d}",
            "zags_name_kz": "–ê–ª–º–∞—Ç—ã “õ. –ù–∞—É—Ä—ã–∑–±–∞–π –∞—É–¥–∞–Ω—ã ”ô–∫—ñ–º –∞–ø–ø–∞—Ä–∞—Ç—ã –ê–∑–∞–º–∞—Ç—Ç—ã“õ —Ö–∞–ª –∞–∫—Ç—ñ–ª–µ—Ä—ñ–Ω —Ç—ñ—Ä–∫–µ—É –±”©–ª—ñ–º—ñ",
            "zags_name_ru": "–ê–ø–ø–∞—Ä–∞—Ç –∞–∫–∏–º–∞ –ù–∞—É—Ä—ã–∑–±–∞–π—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –≥. –ê–ª–º–∞—Ç—ã  –æ—Ç–¥–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–æ–≤ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
        }
        children.append(child)
    
    return children

@app.route('/api/get-child', methods=['POST'])
def get_child():
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ"}), 400
        
        phone = data.get('phone')
        iin = data.get('iin')
        
        if not phone or not iin:
            return jsonify({"error": "–¢—Ä–µ–±—É—é—Ç—Å—è –ø–æ–ª—è phone –∏ iin"}), 400
        
        print(f"–ó–∞–ø—Ä–æ—Å –¥–ª—è –ò–ò–ù: {iin}")
        
        # –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ò–ò–ù –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if iin == "971202300696":
            children_data = FIXED_CHILDREN
            print("–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–µ—Ç–µ–π
            children_data = generate_simple_children()
            print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–µ—Ç–µ–π: {len(children_data)}")
        
        return jsonify({
            "success": True,
            "data": {
                "result": 2,
                "childs": children_data
            }
        })
        
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({
            "success": False,
            "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        }), 500

@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({"status": "OK", "service": "child-service"})

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5003))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ Child Service –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(debug=False, host='0.0.0.0', port=port)


